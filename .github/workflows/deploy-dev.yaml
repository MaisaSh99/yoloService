name: YOLO Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

    secrets:
      EC2_SSH_KEY:
        required: true
      EC2_DEV_HOST:
        required: true
      EC2_DEV_USER:
        required: true
      S3_BUCKET_NAME_DEV:
        required: true
      DYNAMODB_TABLE_DEV:
        required: false

  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string
        description: 'Docker image name to deploy'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image name artifact (fallback)
        uses: actions/download-artifact@v4
        with:
          name: image-name
          path: ./
        continue-on-error: true

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Determine image name
        id: get-image
        run: |
          if [ -n "${{ inputs.image }}" ]; then
            IMAGE_NAME="${{ inputs.image }}"
            echo "‚úÖ Using input image: $IMAGE_NAME"
          elif [ -f "image_name.txt" ]; then
            IMAGE_NAME=$(cat image_name.txt)
            echo "‚úÖ Using artifact image: $IMAGE_NAME"
          else
            echo "‚ùå No image name found!"
            exit 1
          fi
          
          echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "üöÄ Final image name: $IMAGE_NAME"

      - name: Create .env file
        run: |
          IMAGE_NAME="${{ steps.get-image.outputs.image }}"
          
          echo "IMG_NAME=$IMAGE_NAME" > .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_DEV }}" >> .env
          echo "STORAGE_TYPE=dynamodb" >> .env
          echo "DYNAMODB_TABLE=${{ secrets.DYNAMODB_TABLE_DEV || 'YoloPredictions-Dev' }}" >> .env
          echo "AWS_DEFAULT_REGION=eu-west-2" >> .env
          
          echo "üìù Contents of .env file:"
          cat .env

      - name: SSH and deploy using Docker Compose
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no .env ${{ secrets.EC2_DEV_USER }}@${{ secrets.EC2_DEV_HOST }}:/home/ubuntu/yoloService/.env

          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_DEV_USER }}@${{ secrets.EC2_DEV_HOST }} << 'EOF'
            echo "üìÅ Cloning or updating repo"
            if [ -d "yoloService" ]; then
              cd yoloService
              git checkout dev
              git pull origin dev
            else
              git clone --branch dev https://github.com/${{ github.repository }} yoloService
              cd yoloService
            fi
          
            echo "üìù Checking .env file contents on server:"
            cat .env
            
            echo "üîß Setting up AWS CLI if not present"
            if ! command -v aws &> /dev/null; then
              echo "üì¶ Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            else
              echo "‚úÖ AWS CLI already installed"
            fi
            
            echo "üîç Checking AWS configuration"
            aws sts get-caller-identity || echo "‚ö†Ô∏è AWS credentials not configured properly"
            
            echo "üóÑÔ∏è Checking DynamoDB table status"
            DYNAMODB_TABLE=$(grep DYNAMODB_TABLE .env | cut -d'=' -f2)
            echo "Checking table: $DYNAMODB_TABLE"
            
            # Test DynamoDB access
            aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region eu-west-2 2>/dev/null || \
              echo "‚ö†Ô∏è DynamoDB table $DYNAMODB_TABLE not accessible (will be created automatically)"
                    
            echo "[+] Checking for Docker"
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "‚úÖ Docker already installed"
            fi

            echo "üê≥ Running Docker Compose for Dev"
            docker compose -f docker-compose.dev.yaml pull
            docker compose -f docker-compose.dev.yaml up -d --remove-orphans

            echo "‚è±Ô∏è Waiting for services to start..."
            sleep 30

            echo "üîç Verifying YOLO health"
            if curl -s http://localhost:8080/health | grep -q 'ok'; then
              echo "‚úÖ YOLO health check passed"
            else
              echo "‚ö†Ô∏è YOLO health check failed"
              docker logs yolo-dev 2>/dev/null || echo "No yolo-dev container found"
            fi

            echo "üîç Verifying OpenTelemetry metrics endpoint"
            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
              echo "‚úÖ OpenTelemetry metrics are exposed"
            else
              echo "‚ö†Ô∏è Metrics not available"
              docker logs otel-collector-yolo-dev 2>/dev/null || echo "No otelcol container found"
            fi
            
            echo "üóÑÔ∏è Testing DynamoDB connectivity"
            if curl -s -X POST -F "file=@tests/test_image.jpg" http://localhost:8080/predict 2>/dev/null; then
              echo "‚úÖ DynamoDB storage test passed"
            else
              echo "‚ö†Ô∏è DynamoDB storage test failed - check logs"
              docker logs yolo-dev --tail 20 2>/dev/null || echo "No logs available"
            fi
          EOF