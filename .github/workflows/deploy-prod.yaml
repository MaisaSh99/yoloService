name: YOLO Deploy Prod

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

    secrets:
      EC2_SSH_KEY:
        required: true
      EC2_HOST:
        required: true
      EC2_USER:
        required: true
      S3_BUCKET_NAME_PROD:
        required: true
      DYNAMODB_TABLE_PROD:
        required: false

  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string
        description: 'Docker image name to deploy'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image name artifact (fallback)
        uses: actions/download-artifact@v4
        with:
          name: image-name
          path: ./
        continue-on-error: true

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Determine image name
        id: get-image
        run: |
          if [ -n "${{ inputs.image }}" ]; then
            IMAGE_NAME="${{ inputs.image }}"
            echo "‚úÖ Using input image: $IMAGE_NAME"
          elif [ -f "image_name.txt" ]; then
            IMAGE_NAME=$(cat image_name.txt)
            echo "‚úÖ Using artifact image: $IMAGE_NAME"
          else
            echo "‚ùå No image name found!"
            exit 1
          fi
          
          echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "üöÄ Final image name: $IMAGE_NAME"

      - name: Create .env file
        run: |
          IMAGE_NAME="${{ steps.get-image.outputs.image }}"
          
          echo "IMG_NAME=$IMAGE_NAME" > .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_PROD }}" >> .env
          echo "STORAGE_TYPE=dynamodb" >> .env
          echo "DYNAMODB_TABLE=${{ secrets.DYNAMODB_TABLE_PROD || 'maisa-YoloPredictions-Prod' }}" >> .env
          echo "AWS_DEFAULT_REGION=us-east-2" >> .env
          echo "ENVIRONMENT=prod" >> .env
          
          echo "üìù Contents of .env file:"
          cat .env

      - name: SSH and deploy using Docker Compose
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/yoloService/.env

          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "üíæ CHECKING DISK SPACE AND CLEANING UP"
            
            # Show current disk usage
            echo "Current disk usage:"
            df -h /
            
            # Check if disk usage is above 80%
            DISK_USAGE=$(df / | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
            echo "Disk usage: ${DISK_USAGE}%"
            
            if [ "$DISK_USAGE" -gt 80 ]; then
              echo "‚ö†Ô∏è Disk usage is high (${DISK_USAGE}%), performing cleanup..."
              
              # Docker cleanup
              echo "üßπ Cleaning Docker system..."
              docker system prune -af --volumes 2>/dev/null || echo "Docker cleanup completed"
              
              # Remove unused Docker images
              echo "üóëÔ∏è Removing unused Docker images..."
              docker image prune -af 2>/dev/null || echo "Image cleanup completed"
              
              # Clean package cache
              echo "üì¶ Cleaning package cache..."
              sudo apt-get clean 2>/dev/null || echo "APT cache cleaned"
              sudo apt-get autoremove -y 2>/dev/null || echo "Autoremove completed"
              
              # Clean logs older than 7 days
              echo "üìù Cleaning old logs..."
              sudo find /var/log -name "*.log" -type f -mtime +7 -delete 2>/dev/null || echo "Log cleanup completed"
              sudo journalctl --vacuum-time=7d 2>/dev/null || echo "Journal cleanup completed"
              
              # Clean temporary files
              echo "üóÇÔ∏è Cleaning temporary files..."
              sudo rm -rf /tmp/* 2>/dev/null || echo "Temp cleanup completed"
              sudo rm -rf /var/tmp/* 2>/dev/null || echo "Var temp cleanup completed"
              
              # Show disk usage after cleanup
              echo "Disk usage after cleanup:"
              df -h /
            else
              echo "‚úÖ Disk usage is acceptable (${DISK_USAGE}%)"
            fi
            
            echo "üìÅ Cloning or updating repo"
            if [ -d "yoloService" ]; then
              cd yoloService
              git checkout main
              git pull origin main
            else
              git clone --branch main https://github.com/${{ github.repository }} yoloService
              cd yoloService
            fi
          
            echo "üìù Checking .env file contents on server:"
            cat .env
            
            echo "üîß Setting up AWS CLI if not present"
            if ! command -v aws &> /dev/null; then
              echo "üì¶ Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            else
              echo "‚úÖ AWS CLI already installed"
            fi
            
            echo "üîç Checking AWS configuration"
            aws sts get-caller-identity || echo "‚ö†Ô∏è AWS credentials not configured properly"
            
            echo "üóÑÔ∏è Checking DynamoDB table status in us-east-2"
            DYNAMODB_TABLE=$(grep DYNAMODB_TABLE .env | cut -d'=' -f2)
            echo "Checking table: $DYNAMODB_TABLE in us-east-2"
            
            # Test DynamoDB access in us-east-2
            aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region us-east-2 2>/dev/null || \
              echo "‚ö†Ô∏è DynamoDB table $DYNAMODB_TABLE not accessible in us-east-2 (will be created automatically)"

            echo "üîç Checking SQS queue access"
            aws sqs get-queue-url --queue-name "maisa-polybot-chat-messages" --region us-east-2 2>/dev/null && \
              echo "‚úÖ SQS queue 'maisa-polybot-chat-messages' is accessible" || \
              echo "‚ö†Ô∏è SQS queue 'maisa-polybot-chat-messages' not accessible"
                    
            echo "[+] Checking for Docker"
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "‚úÖ Docker already installed"
            fi

            echo "üîç INVESTIGATING PORT 8889 CONFLICTS"
            
            # Show what's using port 8889
            echo "Processes using port 8889:"
            sudo lsof -i :8889 || echo "No processes found using port 8889"
            
            # Show all listening ports
            echo "All listening ports:"
            sudo netstat -tlnp | grep -E ":(8080|8889)" || echo "No processes on ports 8080/8889"
            
            # Show Docker containers and their ports
            echo "Current Docker containers:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            echo "üõë TARGETED OPENTELEMETRY COLLECTOR CLEANUP"
            
            # Stop OpenTelemetry systemd service if it exists
            echo "Stopping OpenTelemetry systemd service..."
            sudo systemctl stop otelcol 2>/dev/null || echo "No otelcol systemd service found"
            sudo systemctl disable otelcol 2>/dev/null || echo "No otelcol systemd service to disable"
            
            # Kill any standalone otelcol processes
            echo "Killing standalone OpenTelemetry processes..."
            sudo pkill -f otelcol 2>/dev/null || echo "No otelcol processes found"
            sudo pkill -f opentelemetry-collector 2>/dev/null || echo "No opentelemetry-collector processes found"
            
            # Kill specific PIDs that we found using port 8889
            echo "Killing specific processes using port 8889..."
            sudo kill -9 $(sudo lsof -t -i:8889) 2>/dev/null || echo "No processes to kill on port 8889"
            
            # General Docker and port cleanup
            echo "üõë GENERAL DOCKER AND PORT CLEANUP"
            
            # Stop all Docker containers
            echo "Stopping ALL Docker containers..."
            docker stop $(docker ps -aq) 2>/dev/null || echo "No containers to stop"
            
            # Remove all Docker containers
            echo "Removing ALL Docker containers..."
            docker rm -f $(docker ps -aq) 2>/dev/null || echo "No containers to remove"
            
            # Kill ALL processes on target ports (more aggressive)
            echo "Forcefully killing ALL processes on ports 8080 and 8889..."
            sudo pkill -f ":8080" 2>/dev/null || echo "No processes killed on port 8080"
            sudo pkill -f ":8889" 2>/dev/null || echo "No processes killed on port 8889"
            sudo fuser -k 8080/tcp 2>/dev/null || echo "Port 8080 force-freed"
            sudo fuser -k 8889/tcp 2>/dev/null || echo "Port 8889 force-freed"
            
            # Additional aggressive port cleanup
            echo "Additional port cleanup methods..."
            sudo kill -9 $(sudo lsof -t -i:8080) 2>/dev/null || echo "No additional processes on 8080"
            sudo kill -9 $(sudo lsof -t -i:8889) 2>/dev/null || echo "No additional processes on 8889"
            
            # Clean up Docker networks completely
            echo "Removing ALL Docker networks..."
            docker network rm $(docker network ls -q) 2>/dev/null || echo "No networks to remove"
            
            # Docker system reset
            echo "Complete Docker system cleanup..."
            docker system prune -af --volumes 2>/dev/null || echo "Docker system cleaned"
            
            # Wait for system to settle
            echo "Waiting for system to settle after aggressive cleanup..."
            sleep 10
            
            # Final verification that ports are free
            echo "üîç FINAL PORT VERIFICATION:"
            echo "Port 8080 status:"
            sudo lsof -i :8080 || echo "‚úÖ Port 8080 is free"
            echo "Port 8889 status:"
            sudo lsof -i :8889 || echo "‚úÖ Port 8889 is free"
            
            # Check for any remaining otelcol processes
            echo "Checking for any remaining otelcol processes:"
            ps aux | grep otelcol | grep -v grep || echo "‚úÖ No otelcol processes running"

            echo "üê≥ Running Docker Compose for Prod (with complete reset)"
            
            # Ensure we're in the right directory
            cd /home/ubuntu/yoloService
            
            # Complete reset and restart
            docker compose -f docker-compose.prod.yaml down --remove-orphans --volumes 2>/dev/null || echo "Nothing to bring down"
            
            # Pull images
            echo "üì• Pulling latest images..."
            if ! docker compose -f docker-compose.prod.yaml pull; then
              echo "‚ö†Ô∏è Pull failed, performing additional cleanup..."
              docker system prune -af --volumes
              docker compose -f docker-compose.prod.yaml pull
            fi
            
            # Start services with force recreate
            echo "üöÄ Starting services with force recreate..."
            docker compose -f docker-compose.prod.yaml up -d --force-recreate --remove-orphans

            echo "‚è±Ô∏è Waiting for services to start..."
            sleep 30

            echo "üîç Verifying YOLO health"
            if curl -s http://localhost:8080/health | grep -q 'ok'; then
              echo "‚úÖ YOLO health check passed"
            else
              echo "‚ö†Ô∏è YOLO health check failed"
              docker logs yolo-prod 2>/dev/null || echo "No yolo-prod container found"
              echo "Container status:"
              docker ps -a | grep yolo
            fi

            echo "üîç Verifying OpenTelemetry metrics endpoint"
            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
              echo "‚úÖ OpenTelemetry metrics are exposed"
            else
              echo "‚ö†Ô∏è Metrics not available"
              docker logs otel-collector-yolo-prod 2>/dev/null || echo "No otelcol container found"
              echo "Checking what's on port 8889 after deployment:"
              sudo lsof -i :8889 || echo "Nothing found on port 8889"
            fi
            
            echo "üóÑÔ∏è Testing DynamoDB connectivity in us-east-2"
            if curl -s -X POST -F "file=@tests/test_image.jpg" http://localhost:8080/predict 2>/dev/null; then
              echo "‚úÖ DynamoDB storage test passed in us-east-2"
              echo "Table: $DYNAMODB_TABLE"
            else
              echo "‚ö†Ô∏è DynamoDB storage test failed - check logs"
              docker logs yolo-prod --tail 20 2>/dev/null || echo "No logs available"
            fi

            echo "üîç Testing SQS Consumer"
            docker logs yolo-prod --tail 50 | grep -i "sqs\|queue" || echo "No SQS logs found"
            
            echo "üìä Final container status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo "üîç Final port investigation:"
            sudo lsof -i :8080 || echo "Port 8080 free"
            sudo lsof -i :8889 || echo "Port 8889 free"
            
            echo "üíæ Final disk usage:"
            df -h /
          EOF