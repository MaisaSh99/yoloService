name: YOLO Deploy Prod

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

    secrets:
      EC2_SSH_KEY:
        required: true
      EC2_HOST:
        required: true
      EC2_USER:
        required: true
      S3_BUCKET_NAME_PROD:
        required: true
      DYNAMODB_TABLE_PROD:
        required: false

  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string
        description: 'Docker image name to deploy'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image name artifact (fallback)
        uses: actions/download-artifact@v4
        with:
          name: image-name
          path: ./
        continue-on-error: true

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Determine image name
        id: get-image
        run: |
          if [ -n "${{ inputs.image }}" ]; then
            IMAGE_NAME="${{ inputs.image }}"
            echo "✅ Using input image: $IMAGE_NAME"
          elif [ -f "image_name.txt" ]; then
            IMAGE_NAME=$(cat image_name.txt)
            echo "✅ Using artifact image: $IMAGE_NAME"
          else
            echo "❌ No image name found!"
            exit 1
          fi
          
          echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "🚀 Final image name: $IMAGE_NAME"

      - name: Create .env file
        run: |
          IMAGE_NAME="${{ steps.get-image.outputs.image }}"
          
          echo "IMG_NAME=$IMAGE_NAME" > .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_PROD }}" >> .env
          echo "STORAGE_TYPE=dynamodb" >> .env
          echo "DYNAMODB_TABLE=${{ secrets.DYNAMODB_TABLE_PROD || 'YoloPredictions-Prod' }}" >> .env
          echo "AWS_DEFAULT_REGION=eu-west-2" >> .env
          
          echo "📝 Contents of .env file:"
          cat .env

      - name: SSH and deploy using Docker Compose
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/yoloService/.env

          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "📁 Cloning or updating repo"
            if [ -d "yoloService" ]; then
              cd yoloService
              git checkout main
              git pull origin main
            else
              git clone --branch main https://github.com/${{ github.repository }} yoloService
              cd yoloService
            fi
          
            echo "📝 Checking .env file contents on server:"
            cat .env
            
            echo "🔧 Setting up AWS CLI if not present"
            if ! command -v aws &> /dev/null; then
              echo "📦 Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            else
              echo "✅ AWS CLI already installed"
            fi
            
            echo "🔍 Checking AWS configuration"
            aws sts get-caller-identity || echo "⚠️ AWS credentials not configured properly"
            
            echo "🗄️ Checking DynamoDB table status"
            DYNAMODB_TABLE=$(grep DYNAMODB_TABLE .env | cut -d'=' -f2)
            echo "Checking table: $DYNAMODB_TABLE"
            
            # Test DynamoDB access
            aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region eu-west-2 2>/dev/null || \
              echo "⚠️ DynamoDB table $DYNAMODB_TABLE not accessible (will be created automatically)"
                    
            echo "[+] Checking for Docker"
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "✅ Docker already installed"
            fi

            echo "🛑 FORCE STOPPING ALL CONFLICTING SERVICES"
            
            # Stop all Docker containers first
            echo "Stopping all running Docker containers..."
            docker stop $(docker ps -q) 2>/dev/null || echo "No containers to stop"
            
            # Kill any processes using our ports
            echo "Killing any processes using ports 8080, 8889..."
            sudo fuser -k 8080/tcp 2>/dev/null || echo "Port 8080 is free"
            sudo fuser -k 8889/tcp 2>/dev/null || echo "Port 8889 is free"
            
            # Remove any existing containers
            echo "Removing old containers..."
            docker rm -f yolo-dev yolo-prod otel-collector-yolo-dev otel-collector-yolo-prod 2>/dev/null || echo "No containers to remove"
            
            # Clean up networks
            echo "Cleaning up Docker networks..."
            docker network prune -f 2>/dev/null || echo "No networks to clean"
            
            # Wait a moment for ports to be released
            echo "Waiting for ports to be released..."
            sleep 5
            
            echo "[+] Checking for Docker"
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "✅ Docker already installed"
            fi

            echo "🐳 Running Docker Compose for Prod (with clean start)"
            docker compose -f docker-compose.prod.yaml down --remove-orphans 2>/dev/null || echo "Nothing to bring down"
            docker compose -f docker-compose.prod.yaml pull
            docker compose -f docker-compose.prod.yaml up -d --remove-orphans

            echo "⏱️ Waiting for services to start..."
            sleep 30

            echo "🔍 Verifying YOLO health"
            if curl -s http://localhost:8080/health | grep -q 'ok'; then
              echo "✅ YOLO health check passed"
            else
              echo "⚠️ YOLO health check failed"
              docker logs yolo-prod 2>/dev/null || echo "No yolo-prod container found"
            fi

            echo "🔍 Verifying OpenTelemetry metrics endpoint"
            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
              echo "✅ OpenTelemetry metrics are exposed"
            else
              echo "⚠️ Metrics not available"
              docker logs otel-collector-yolo-prod 2>/dev/null || echo "No otelcol container found"
            fi
            
            echo "🗄️ Testing DynamoDB connectivity"
            if curl -s -X POST -F "file=@tests/test_image.jpg" http://localhost:8080/predict 2>/dev/null; then
              echo "✅ DynamoDB storage test passed"
            else
              echo "⚠️ DynamoDB storage test failed - check logs"
              docker logs yolo-prod --tail 20 2>/dev/null || echo "No logs available"
            fi
            
            echo "📊 Final container status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF